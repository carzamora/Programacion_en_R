- Class: meta
  Course: Programación en R
  Lesson: Bloques Básicos de Construcción
  Author: Alcides Chaux
  Type:
  Organization:
  Version: 2.2.0

- Class: text
  Output: En esta lección exploraremos algunos de los bloques básicos de construcción del lenguaje de programación R.

- Class: text
  Output: Si en algún momento quisieras más información acerca de un tópico en particular relacionado con R puedes tipear help.start() en la línea de comandos, lo que abrirá un menú de recursos (ya sea dentro de RStudio o en tu navegador web por defecto, dependiendo de tu configuración). Alternativamente, una simple búsqueda web a menudo te permitirá encontrar la respuesta que estabas buscando.

- Class: cmd_question
  Output: En su forma más simple, R puede ser usado como una calculadora interactiva. Tipea 5 + 7 y presiona Enter.
  CorrectAnswer: 5 + 7
  AnswerTests: omnitest(correctExpr = '5 + 7')
  Hint: Tipea 5 + 7 y presiona Enter.

- Class: text
  Output: Notarás que R imprime el resultado de la operación (12 en este caso) por defecto. Sin embargo, R puede ser usado para mucho más que simples operaciones aritméticas. Además de servir para analizar datos, R es un lenguaje de programación y a menudo la razón por la que usamos un lenguaje de programación (en vez de una calculadora) es para automatizar algunos procesos o evitar repeticiones innecesarias.

- Class: text
  Output: En este caso, podríamos querer usar nuestro resultado anterior en una segunda operación. En vez de retipear 5 + 7 cada vez que lo necesitemos, podemos simplemente crear una nueva variable que almacene ese resultado.

- Class: text
  Output: 'La forma en que asignas un valor a una variable en R es mediante el operador de asignación, que es simplemente un símbolo de "menos que" seguido por un signo "menos". Se ve así: <-'

- Class: text
  Output: Piensa en el operador de asignación como si fuese una flecha. Estás asignando el valor del lado derecho de la flecha al nombre de la variable en el lado izquierdo de la flecha.

- Class: cmd_question
  Output: Para asignar el resultado de 5 + 7 a una nueva variable llamada x, tipea x <- 5 + 7. Esto se puede leer como 'x recibe 5 más 7'. Inténtalo ahora.
  CorrectAnswer: x <- 5 + 7
  AnswerTests: any_of_exprs('x <- 5 + 7', 'x <- 7 + 5')
  Hint: Tipea x <- 5 + 7. Es recomendable incluir un espacio simple a cada lado del operador de asignación para incrementar la legibilidad. Pero NO coloques un espacio entre el '<' y el '-' que forman la flecha, recuerda que a pesar de estar compuesto por dos caracteres es un único símbolo.

- Class: text
  Output: Habrás notado que R no imprime el resultado de la operación esta vez. Cuando usas el operador de asignación, R asume que no quieres ver el resultado inmediatamente, sino que pretendes usar el resultado para algo más adelante.

- Class: cmd_question
  Output: Para visualizar el contenido de la variable x simplemente tipea x y presiona Enter. Inténtalo ahora.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr = 'x')
  Hint: Tipea x y presiona Enter. Esto automáticamente imprimirá el valor de x.

- Class: cmd_question
  Output: Ahora, almacena el resultado de x - 3 en una nueva variable llamada y.
  CorrectAnswer: y <- x - 3
  AnswerTests: omnitest(correctExpr = 'y <- x - 3')
  Hint: Tipea y <- x - 3 y presiona Enter. Si usas x - 3 o x-3 es una preferencia personal, pero es un buen hábito el incluir un espacio en cada lado del operador de asignación, para incrementar la legibilidad.

- Class: cmd_question
  Output: Cuál es el valor de y? Tipea y para averiguarlo.
  CorrectAnswer: 'y'
  AnswerTests: omnitest(correctExpr = 'y')
  Hint: Tipea y y presiona Enter.

- Class: text
  Output: Ahora, vamos a crear una colección de números, esto es, un vector. Los vectores numéricos son la forma más simple de estructurar datos en R. De hecho, incluso un número único es considerado un vector de longitud 1.

- Class: cmd_question
  Output: La forma más sencilla de crear un vector es con la función c(), que hace referencia a 'concatenar' o 'combinar'. Para crear un vector conteniendo los números 1.1, 9, y 3.14 tipea c(1.1, 9, 3.14). Inténtalo ahora y almacena el resultado en una variable llamada z.
  CorrectAnswer: z <- c(1.1, 9, 3.14)
  AnswerTests: omnitest(correctExpr = 'z <- c(1.1, 9, 3.14)')
  Hint: Ingresando z <- c(1.1, 9, 3.14) asignará el vector (1.1, 9. 3.14) a una nueva variable llamada z. No es necesario incluir los espacios simples después de las comas, pero ayuda a que tu código sea más legible.

- Class: cmd_question
  Output: Cada vez que tengas preguntas sobre una función en particular, puedes acceder al sistema de ayuda de R a través del comando `?`. Por ejemplo, si quieres más información sobre la función c(), tipea ?c sin los paréntesis que normalmente siguen al nombre de una función. Inténtalo.
  CorrectAnswer: ?c
  AnswerTests: omnitest(correctExpr = '?c')
  Hint: Tipea ?c y presiona Enter. Esto abrirá el archivo de ayuda para la función c().

- Class: cmd_question
  Output: Tipea z para visualizar su contenido. Ten en cuenta que no hay comas separando los valores en el resultado.
  CorrectAnswer: z
  AnswerTests: omnitest(correctExpr = 'z')
  Hint: Tipea z y presiona Enter para visualizar su contenido.

- Class: cmd_question
  Output: Puedes combinar vectores para crear un nuevo vector. Crea un nuevo vector que contenga z, 555, y luego z otra vez, en ese orden. No asignes este vector a una nueva variable, de modo a simplemente ver los resultados inmediatamente.
  CorrectAnswer: c(z, 555, z)
  AnswerTests: omnitest(correctExpr = 'c(z, 555, z)')
  Hint: Tipea c(z, 555, z). No crees una nueva variable. Simplemente queremos visualizar el resultado.

- Class: cmd_question
  Output: 'Vectores numéricos pueden ser usados en expresiones aritméticas. Tipea lo siguiente para ver qué pasa: z * 2 + 100'
  CorrectAnswer: z * 2 + 100
  AnswerTests: omnitest(correctExpr='z * 2 + 100')
  Hint: Ingresa z * 2 + 100, sin asignar el resultado a una variable. El símbolo `*` se usa para indicar multiplicación.

- Class: text
  Output: Primero, R multiplicó cada uno de los 3 elementos en z por 2. Luego le sumó 100 a cada elemento para obtener el resultado que ves arriba.

- Class: text
  Output: Otros operadores aritméticos comunes son `+`, `-`, `/`, y `^` (donde x^2 significa `x al cuadrado`. Para hallar la raíz cuadrada, usa la función sqrt() y para hallar el valor absoluto, usa la función abs().

- Class: cmd_question
  Output: Halla la raíz cuadrada de z - 1 y asigna el resultado a una nueva variable llamada raiz_c.
  CorrectAnswer: raiz_c <- sqrt(z - 1)
  AnswerTests: omnitest(correctExpr = 'raiz_c <- sqrt(z - 1)')
  Hint: Asigna el resultado de sqrt(z - 1) a una variable llamada raiz_c.

- Class: mult_question
  Output: Antes de que veamos los contenidos de la variable raiz_c, qué piensas que contiene?
  CorrectAnswer: Un vector de longitud 3
  AnswerChoices: Un vector de longitud 3; Un número único (i.e., un vector de longitud 1); Un vector de longitud 0 (i.e., un vector vacío)
  AnswerTests: omnitest(correctVal = 'Un vector de longitud 3')
  Hint: 'Piensa en cómo R maneja las otras operaciones vectorizadas: elemento-por-elemento.'

- Class: cmd_question
  Output: Imprime los contenidos de raiz_c.
  CorrectAnswer: raiz_c
  AnswerTests: omnitest(correctExpr = 'raiz_c')
  Hint: Simplemente tipea raiz_c y presiona Enter para ver su valor.

- Class: text
  Output: Como habrás supuesto, R primero substrae 1 de cada elemento de z, luego halla la raíz cuadrada de cada elemento. Esto nos deja con un vector de la misma longitud que el vector original z.

- Class: cmd_question
  Output: Ahora, creemos una nueva variable llamada div que halle el valor de z dividido por raiz_c.
  CorrectAnswer: div <- z / raiz_c
  AnswerTests: omnitest(correctExpr = 'div <- z / raiz_c')
  Hint: Ingresa div <- z / raiz_c. Los espacios a cada lado del signo `/` no son necesarios, pero a menudo pueden hacer el código más legible al hacer que se encime menos. Al final, es una preferencia personal.

- Class: mult_question
  Output: ¿Cuál de las siguientes afirmaciones piensas que es correcta?
  CorrectAnswer: El primer elemento de div es igual al primer elemento de z dividido por el primer elemento de raiz_c, y así sucesivamente
  AnswerChoices: El primer elemento de div es igual al primer elemento de z dividido por el primer elemento de raiz_c, y así sucesivamente; div es un único número (i.e., un vector de longitud 1); div es indefinido
  AnswerTests: omnitest(correctVal = 'El primer elemento de div es igual al primer elemento de z dividido por el primer elemento de raiz_c, y así sucesivamente')
  Hint: Piensa en cómo R maneja las otras operaciones vectorizadas tales como `+` y `*`.

- Class: cmd_question
  Output: Vamos, imprime los contenidos de div.
  CorrectAnswer: div
  AnswerTests: omnitest(correctExpr = 'div')
  Hint: Tipea div y presiona Enter para ver sus contenidos.

- Class: text
  Output: Cuando se dan 2 vectores de la misma longitud R simplemente lleva a cabo la operación aritmética especificada (`+`, `-`, `*`, etc.) elemento-por-elemento. Si los vectores presentan diferente longitud, R 'recicla' el vector más corto hasta que alcanza la misma longitud del vector más largo.

- Class: text
  Output: Cuando calculamos z * 2 + 100 en nuestro ejemplo previo, z era un vector de longitud 3, pero técnicamente 2 y 100 son cada uno vectores de longitud 1.

- Class: text
  Output: 'Detrás del escenario R está "reciclando" los 2 para crear un vector de 2s y el 100 para crear un vector de 100s. En otras palabras, cuando pides a R que calcule z * 2 + 100 lo que realmente calcula es ésto: z * c(2, 2, 2) + c(100, 100, 100).'

- Class: cmd_question
  Output: Para ver otro ejemplo de cómo esto del 'reciclado' de vectores funciona intenta sumar c(1, 2, 3, 4) y c(0, 10). No te preocupes en guardar el resultado en una nueva variable.
  AnswerTests: omnitest(correctExpr = 'c(1, 2, 3, 4) + c(0, 10)')
  Hint: Ingresa c(1, 2, 3, 4) + c(0, 10) en la consola para ver cómo R suma 2 vectores de diferente longitud. No asignes el resultado a una variable.

- Class: text
  Output: Si la longitud del vector más corto no divide exactamente la longitud del vector más largo, R igual aplicará el método de 'reciclado', pero te dará una advertencia para hacerte saber que algo raro puede estar sucediendo.

- Class: cmd_question
  Output: Intenta c(1, 2, 3, 4) + c(0, 10, 100) como ejemplo.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10, 100)
  AnswerTests: omnitest(correctExpr = 'c(1, 2, 3, 4) + c(0, 10, 100)')
  Hint: Tipea c(1, 2, 3, 4) + c(0, 10, 100) para ver cómo R maneja la adición de 2 vectores cuando la longitud del vector más corto no divide exactamente a la longitud del vector más largo. No te preocupes en asignar el resultado a una variable.

- Class: text
  Output: Antes de concluir esta lección, quisiera mostrarte un par de trucos que te ahorrarán mucho tiempo.

- Class: text
  Output: Previamente en esta lección calculaste z * 2 + 100. Pretendamos que has cometido un error y que querías sumar 1000 en vez de 100. Podrías retipear la expresión o ...

- Class: cmd_question
  Output: En muchos entornos de programación la flecha hacia arriba circulará a través de comandos previos. Intenta apretar la flecha hacia arriba en tu teclado hasta que obtengas este comando (z * 2 + 100), luego cambia el 100 por 1000 y presiona Enter. Si lo de la flecha hacia arriba no te funciona, entonces simplemente tipea el comando correcto.
  CorrectAnswer: z * 2 + 1000
  AnswerTests: omnitest(correctExpr = 'z * 2 + 1000')
  Hint: Si tu entorno no soporta la característica de la flecha hacia arriba, entonces simplemente tipea el comando correcto para seguir avanzando.

- Class: text
  Output: Finalmente, pretendamos que quiseras ver los contenidos de una variable que creaste antes, pero no puedes recordar si la llamaste div o diV (recuerda que en R las mayúsculas importan, por lo que div y diV son dos objetos diferentes). Podrías probar ambas a ver cuál funciona, o ...

- Class: cmd_question
  Output: Puedes tipear las primeras dos letras del nombre de la variable, luego presionar la tecla de tabulación, las veces necesarias hasta encontrar el nombre que estás buscando. La mayoría de los ambientes de programación proveerán de una lista de variables que has creado que empiezan con 'di'. Eso se denomina auto-completado y puede ser muy útil cuando tienes muchas variables en tu espacio de trabajo. Inténtalo ahora. Si eso del auto-completado no te funciona, simplemente tipea div y presiona Enter.
  CorrectAnswer: div
  AnswerTests: omnitest(correctExpr = 'div')
  Hint: Si tu entorno de programación no soporta el auto-completado simplemente tipea div y presiona Enter para seguir adelante.

- Class: text
  Output: Con esto terminamos la Lección 1 acerca de los bloques básicos de construcción de objetos en R. Felicidades! Acabas de dar el primer paso para convertirte en un experto en R. Sigamos adelante! En la siguiente lección veremos cómo administrar archivos y el espacio de trabajo usando R.
